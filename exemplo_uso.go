package main

import (
	"os"
	"path/filepath"

	"github.com/sirupsen/logrus"
)

// ExemploUso demonstra o uso b√°sico do processador
func ExemploUso() {
	logrus.Info("üéØ Exemplo b√°sico de uso do processador de DARMs")

	// 1. Criar processador
	processor := NewDarmProcessor()

	// 2. Inicializar
	if err := processor.Init(); err != nil {
		logrus.Errorf("‚ùå Erro ao inicializar: %v", err)
		return
	}

	// 3. Processar DARMs
	if err := processor.ProcessDarms(); err != nil {
		logrus.Errorf("‚ùå Erro durante o processamento: %v", err)
		return
	}

	// 4. Mostrar resultados
	showResults(processor)

	logrus.Info("‚úÖ Exemplo b√°sico conclu√≠do!")
}

// ExemploTestes demonstra como executar testes
func ExemploTestes() {
	logrus.Info("üß™ Exemplo de execu√ß√£o de testes")

	// Criar dados de teste
	testData := &DarmData{
		Inscricao:      "123456",
		CodigoReceita:  "2623",
		ValorPrincipal: "1.234,56",
		ValorTotal:     "1.234,56",
		DataVencimento: "15/12/2024",
		Exercicio:      "2025",
		NumeroGuia:     "123456789",
	}

	// Testar extra√ß√£o de dados
	processor := NewDarmProcessor()
	testText := `
	02. INSCRI√á√ÉO MUNICIPAL 123456
	01. RECEITA 262-3
	06. VALOR DO TRIBUTO R$ 1.234,56
	09. VALOR TOTAL R$ 1.234,56
	03. DATA VENCIMENTO 15/12/2024
	04. ANO DE REFER√äNCIA 2025
	05. GUIA N√ò
	123456789
	`

	extractedData := processor.extractDarmData(testText)
	if extractedData != nil {
		logrus.Infof("‚úÖ Dados extra√≠dos: Inscri√ß√£o=%s, Guia=%s",
			extractedData.Inscricao, extractedData.NumeroGuia)
	} else {
		logrus.Error("‚ùå Falha na extra√ß√£o de dados")
	}

	// Testar gera√ß√£o de SQL
	sql := processor.generateSQLInsert(testData)
	if sql != "" {
		logrus.Info("‚úÖ SQL gerado com sucesso")
		logrus.Debugf("SQL: %s", sql[:100]+"...")
	} else {
		logrus.Error("‚ùå Falha na gera√ß√£o de SQL")
	}

	logrus.Info("‚úÖ Exemplo de testes conclu√≠do!")
}

// ExemploPerformance demonstra benchmarks
func ExemploPerformance() {
	logrus.Info("‚ö° Exemplo de performance")

	processor := NewDarmProcessor()
	testText := `
	02. INSCRI√á√ÉO MUNICIPAL 123456
	01. RECEITA 262-3
	06. VALOR DO TRIBUTO R$ 1.234,56
	09. VALOR TOTAL R$ 1.234,56
	03. DATA VENCIMENTO 15/12/2024
	04. ANO DE REFER√äNCIA 2025
	05. GUIA N√ò
	123456789
	`

	// Benchmark de extra√ß√£o de dados
	logrus.Info("üîÑ Executando benchmark de extra√ß√£o...")
	for i := 0; i < 1000; i++ {
		processor.extractDarmData(testText)
	}

	// Benchmark de parse de valores monet√°rios
	logrus.Info("üîÑ Executando benchmark de parse monet√°rio...")
	for i := 0; i < 10000; i++ {
		processor.parseMonetaryValue("R$ 1.234,56")
	}

	logrus.Info("‚úÖ Exemplo de performance conclu√≠do!")
}

// Fun√ß√µes auxiliares
func isPDFFile(filename string) bool {
	ext := filepath.Ext(filename)
	return ext == ".pdf" || ext == ".PDF"
}

func showResults(processor *DarmProcessor) {
	logrus.Infof("üìä Total de guias processadas: %d", len(processor.GuiasProcessadas))

	if len(processor.GuiasProcessadas) > 0 {
		logrus.Info("üìã Guias processadas:")
		for i, guia := range processor.GuiasProcessadas {
			logrus.Infof("  %d. Guia %s", i+1, guia)
		}
	}

	// Verificar arquivos gerados
	outputFiles, err := os.ReadDir(processor.OutputDir)
	if err != nil {
		logrus.Errorf("‚ùå Erro ao ler diret√≥rio de sa√≠da: %v", err)
		return
	}

	logrus.Info("üìÑ Arquivos gerados:")
	for _, file := range outputFiles {
		if !file.IsDir() {
			logrus.Infof("  - %s", file.Name())
		}
	}
}
