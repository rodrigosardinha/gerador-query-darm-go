@echo off
setlocal enabledelayedexpansion

REM Script de instala√ß√£o para Processador de DARMs em Go
REM Compat√≠vel com Windows

REM Vari√°veis
set PROJECT_NAME=gerador-query-darm-go
set BINARY_NAME=darm-processor
set VERSION=1.0.0

REM Cores para output (Windows)
set RED=[91m
set GREEN=[92m
set YELLOW=[93m
set BLUE=[94m
set PURPLE=[95m
set CYAN=[96m
set NC=[0m

REM Fun√ß√£o para imprimir mensagens coloridas
:print_message
echo %~2%~1%NC%
goto :eof

REM Fun√ß√£o para verificar se um comando existe
:command_exists
where %~1 >nul 2>&1
if %errorlevel% equ 0 (
    exit /b 0
) else (
    exit /b 1
)

REM Fun√ß√£o para verificar requisitos
:check_requirements
call :print_message "üîç Verificando requisitos do sistema..." "%BLUE%"
    
REM Verificar Go
call :command_exists go
if %errorlevel% neq 0 (
    call :print_message "‚ùå Go n√£o est√° instalado!" "%RED%"
    call :print_message "üí° Instale o Go em: https://golang.org/dl/" "%YELLOW%"
    exit /b 1
)
    
for /f "tokens=3" %%i in ('go version') do set GO_VERSION=%%i
set GO_VERSION=!GO_VERSION:go=!
call :print_message "‚úÖ Go encontrado: !GO_VERSION!" "%GREEN%"
    
REM Verificar Git
call :command_exists git
if %errorlevel% neq 0 (
    call :print_message "‚ùå Git n√£o est√° instalado!" "%RED%"
    call :print_message "üí° Instale o Git para clonar o reposit√≥rio" "%YELLOW%"
    exit /b 1
)
    
for /f "tokens=*" %%i in ('git --version') do set GIT_VERSION=%%i
call :print_message "‚úÖ Git encontrado: !GIT_VERSION!" "%GREEN%"
    
REM Verificar Make (opcional)
call :command_exists make
if %errorlevel% equ 0 (
    call :print_message "‚úÖ Make encontrado" "%GREEN%"
) else (
    call :print_message "‚ö†Ô∏è Make n√£o encontrado (opcional)" "%YELLOW%"
)
    
REM Verificar Docker (opcional)
call :command_exists docker
if %errorlevel% equ 0 (
    call :print_message "‚úÖ Docker encontrado" "%GREEN%"
) else (
    call :print_message "‚ö†Ô∏è Docker n√£o encontrado (opcional)" "%YELLOW%"
)
goto :eof

REM Fun√ß√£o para instalar depend√™ncias
:install_dependencies
call :print_message "üì¶ Instalando depend√™ncias..." "%BLUE%"
    
REM Baixar depend√™ncias
go mod download
    
REM Verificar depend√™ncias
go mod tidy
    
call :print_message "‚úÖ Depend√™ncias instaladas!" "%GREEN%"
goto :eof

REM Fun√ß√£o para criar diret√≥rios
:create_directories
call :print_message "üìÅ Criando diret√≥rios necess√°rios..." "%BLUE%"
    
if not exist "darms" mkdir darms
if not exist "inserts" mkdir inserts
if not exist "build" mkdir build
    
call :print_message "‚úÖ Diret√≥rios criados!" "%GREEN%"
goto :eof

REM Fun√ß√£o para criar arquivo de configura√ß√£o
:create_config
call :print_message "‚öôÔ∏è Criando arquivo de configura√ß√£o padr√£o..." "%BLUE%"
    
echo {> config.json
echo   "database": {>> config.json
echo     "host": "localhost",>> config.json
echo     "port": 3306,>> config.json
echo     "database": "silfae",>> config.json
echo     "username": "root",>> config.json
echo     "password": "",>> config.json
echo     "charset": "latin1">> config.json
echo   },>> config.json
echo   "paths": {>> config.json
echo     "base_dir": ".",>> config.json
echo     "darms_dir": "darms",>> config.json
echo     "output_dir": "inserts",>> config.json
echo     "temp_dir": "temp">> config.json
echo   },>> config.json
echo   "sql": {>> config.json
echo     "encoding": "latin1",>> config.json
echo     "batch_size": 100,>> config.json
echo     "use_transaction": true,>> config.json
echo     "use_ignore": true>> config.json
echo   },>> config.json
echo   "logging": {>> config.json
echo     "level": "info",>> config.json
echo     "format": "text",>> config.json
echo     "output_file": "">> config.json
echo   }>> config.json
echo }>> config.json
    
call :print_message "‚úÖ Arquivo config.json criado!" "%GREEN%"
goto :eof

REM Fun√ß√£o para compilar o projeto
:build_project
call :print_message "üî® Compilando o projeto..." "%BLUE%"
    
REM Compilar
go build -ldflags="-X main.version=%VERSION%" -o build\%BINARY_NAME%.exe .
    
call :print_message "‚úÖ Execut√°vel criado: build\%BINARY_NAME%.exe" "%GREEN%"
goto :eof

REM Fun√ß√£o para executar testes
:run_tests
call :print_message "üß™ Executando testes..." "%BLUE%"
    
REM Executar testes
go test -v ./...
    
call :print_message "‚úÖ Testes conclu√≠dos!" "%GREEN%"
goto :eof

REM Fun√ß√£o para executar benchmarks
:run_benchmarks
call :print_message "‚ö° Executando benchmarks..." "%BLUE%"
    
REM Executar benchmarks
go test -bench=. ./...
    
call :print_message "‚úÖ Benchmarks conclu√≠dos!" "%GREEN%"
goto :eof

REM Fun√ß√£o para criar arquivo .gitkeep
:create_gitkeep
call :print_message "üìù Criando arquivos .gitkeep..." "%BLUE%"
    
if not exist "darms\.gitkeep" type nul > darms\.gitkeep
if not exist "inserts\.gitkeep" type nul > inserts\.gitkeep
    
call :print_message "‚úÖ Arquivos .gitkeep criados!" "%GREEN%"
goto :eof

REM Fun√ß√£o para mostrar informa√ß√µes do sistema
:show_system_info
call :print_message "üíª Informa√ß√µes do sistema:" "%CYAN%"
echo   Sistema Operacional: Windows
for /f "tokens=*" %%i in ('go version') do echo   Go Version: %%i
for /f "tokens=*" %%i in ('git --version') do echo   Git Version: %%i
echo   Arquitetura: %PROCESSOR_ARCHITECTURE%
echo   Vers√£o do Windows: %OS%
goto :eof

REM Fun√ß√£o para mostrar pr√≥ximos passos
:show_next_steps
call :print_message "üéâ Instala√ß√£o conclu√≠da com sucesso!" "%GREEN%"
echo.
call :print_message "üìã Pr√≥ximos passos:" "%YELLOW%"
echo   1. Coloque PDFs dos DARMs na pasta darms\
echo   2. Execute: build\%BINARY_NAME%.exe
echo   3. Verifique os arquivos gerados na pasta inserts\
echo.
call :print_message "üõ†Ô∏è Comandos √∫teis:" "%YELLOW%"
echo   make help        - Mostra ajuda do Makefile
echo   make test        - Executa testes
echo   make run         - Executa o programa
echo   make build       - Recompila o execut√°vel
echo   make clean       - Remove arquivos de build
echo.
call :print_message "üìö Documenta√ß√£o:" "%YELLOW%"
echo   README_Go.md     - Documenta√ß√£o completa
echo   exemplo_uso.go   - Exemplos de uso
goto :eof

REM Fun√ß√£o principal
:main
call :print_message "üèõÔ∏è Processador de DARMs - Vers√£o Go %VERSION%" "%CYAN%"
call :print_message "üöÄ Iniciando instala√ß√£o..." "%BLUE%"
    
REM Verificar requisitos
call :check_requirements
if %errorlevel% neq 0 exit /b 1
    
REM Mostrar informa√ß√µes do sistema
call :show_system_info
    
REM Instalar depend√™ncias
call :install_dependencies
    
REM Criar diret√≥rios
call :create_directories
    
REM Criar arquivo de configura√ß√£o
call :create_config
    
REM Criar arquivos .gitkeep
call :create_gitkeep
    
REM Compilar projeto
call :build_project
    
REM Executar testes
call :run_tests
    
REM Executar benchmarks
call :run_benchmarks
    
REM Mostrar pr√≥ximos passos
call :show_next_steps
goto :eof

REM Verificar se o script est√° sendo executado no diret√≥rio correto
if not exist "go.mod" (
    call :print_message "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto!" "%RED%"
    call :print_message "üí° Certifique-se de que o arquivo go.mod existe no diret√≥rio atual." "%YELLOW%"
    exit /b 1
)

REM Executar fun√ß√£o principal
call :main
pause 